// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BallotButton /> renders without exploding 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BallotButton
    negativeText="No"
    onClickCB={[MockFunction]}
    positiveText="Yes"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="ballotButton__button-container"
        >
          <button
            className="ballotButton ballotButton__positive"
            onClick={[MockFunction]}
          >
            Yes
          </button>
          <button
            className="ballotButton toHaveBeenCalled"
            onClick={[MockFunction]}
          >
            No
          </button>
        </div>,
        <div
          className="ballotButton__timer"
        >
          <BallotTimer />
        </div>,
      ],
      "className": "ballotButton__container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="ballotButton ballotButton__positive"
              onClick={[MockFunction]}
            >
              Yes
            </button>,
            <button
              className="ballotButton toHaveBeenCalled"
              onClick={[MockFunction]}
            >
              No
            </button>,
          ],
          "className": "ballotButton__button-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Yes",
              "className": "ballotButton ballotButton__positive",
              "onClick": [MockFunction],
            },
            "ref": null,
            "rendered": "Yes",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "No",
              "className": "ballotButton toHaveBeenCalled",
              "onClick": [MockFunction],
            },
            "ref": null,
            "rendered": "No",
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <BallotTimer />,
          "className": "ballotButton__timer",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="ballotButton__button-container"
          >
            <button
              className="ballotButton ballotButton__positive"
              onClick={[MockFunction]}
            >
              Yes
            </button>
            <button
              className="ballotButton toHaveBeenCalled"
              onClick={[MockFunction]}
            >
              No
            </button>
          </div>,
          <div
            className="ballotButton__timer"
          >
            <BallotTimer />
          </div>,
        ],
        "className": "ballotButton__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="ballotButton ballotButton__positive"
                onClick={[MockFunction]}
              >
                Yes
              </button>,
              <button
                className="ballotButton toHaveBeenCalled"
                onClick={[MockFunction]}
              >
                No
              </button>,
            ],
            "className": "ballotButton__button-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Yes",
                "className": "ballotButton ballotButton__positive",
                "onClick": [MockFunction],
              },
              "ref": null,
              "rendered": "Yes",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "No",
                "className": "ballotButton toHaveBeenCalled",
                "onClick": [MockFunction],
              },
              "ref": null,
              "rendered": "No",
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <BallotTimer />,
            "className": "ballotButton__timer",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
