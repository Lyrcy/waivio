// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CreateWebsite /> renders without exploding 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <UNDEFINED
      availableStatus=""
      checkStatusAvailableDomain={[Function]}
      createWebsite={[Function]}
      form={Object {}}
      getDomainList={[MockFunction]}
      loading={false}
      parentDomain={
        Array [
          Object {
            "12345": "parent",
          },
        ]
      }
    />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <UNDEFINED
        availableStatus=""
        checkStatusAvailableDomain={[Function]}
        createWebsite={[Function]}
        form={Object {}}
        getDomainList={[MockFunction]}
        loading={false}
        parentDomain={
          Array [
            Object {
              "12345": "parent",
            },
          ]
        }
      />,
      "value": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "handleChangeWrapper": [Function],
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "availableStatus": "",
        "checkStatusAvailableDomain": [Function],
        "createWebsite": [Function],
        "form": Object {},
        "getDomainList": [MockFunction],
        "loading": false,
        "parentDomain": Array [
          Object {
            "12345": "parent",
          },
        ],
      },
      "ref": null,
      "rendered": null,
      "type": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Form(InjectIntl(CreateWebsite)))",
        "type": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": null,
        "_currentValue2": null,
        "_threadCount": 0,
        "displayName": "ReactRedux",
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <UNDEFINED
          availableStatus=""
          checkStatusAvailableDomain={[Function]}
          createWebsite={[Function]}
          form={Object {}}
          getDomainList={[MockFunction]}
          loading={false}
          parentDomain={
            Array [
              Object {
                "12345": "parent",
              },
            ]
          }
        />,
        "value": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "subscription": Subscription {
            "handleChangeWrapper": [Function],
            "listeners": Object {
              "notify": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": null,
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "availableStatus": "",
          "checkStatusAvailableDomain": [Function],
          "createWebsite": [Function],
          "form": Object {},
          "getDomainList": [MockFunction],
          "loading": false,
          "parentDomain": Array [
            Object {
              "12345": "parent",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Form(InjectIntl(CreateWebsite)))",
          "type": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": null,
          "_currentValue2": null,
          "_threadCount": 0,
          "displayName": "ReactRedux",
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
